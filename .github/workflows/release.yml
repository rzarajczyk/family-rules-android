name: Production Builds
on:
  workflow_dispatch:
    inputs:
      name:
        description: "Release-Build"
        default: "Generate release build"
      testers:
        type: choice
        description: "Select testers"
        options:
          - android
          - internalTesters
          - everyone

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checking out branch
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2.0.10

      # This will decode the keystore from base 64 text representation that we have stored in secrets
      # and generates and keystore file and gets stored in /android-app path
      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

        run: |
          echo $ENCODED_STRING > keystore-b64.txt
          base64 -d keystore-b64.txt > keystore.jks

      - name: Build Release apk
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: ./gradlew assembleRelease --stacktrace

      - name: Build Release bundle
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: ./gradlew bundleRelease --stacktrace

      - name: Get release file aab path
        id: releaseAab
        run: echo "aabfile=$(find app/build/outputs/bundle/release/*.aab)" >> $GITHUB_OUTPUT

      - name: Get release file apk path
        id: releaseApk
        run: echo "apkfile=$(find app/build/outputs/apk/release/*.apk)" >> $GITHUB_OUTPUT

      - name: Zip Files
        uses: papeloto/action-zip@v1
        with:
          files: ${{ steps.releaseAab.outputs.aabfile }} ${{ steps.releaseApk.outputs.apkfile }}
          dest: ${{ steps.releaseApk.outputs.apkfile }}.zip

      #      - name: Sending release build to Slack
      #        uses: MeilCli/slack-upload-file@v3
      #        with:
      #          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
      #          file_path: ${{ steps.releaseApk.outputs.apkfile }}.zip
      #          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
      #          initial_comment: "Release build is now available."
      #
      #      - name: upload apk to Firebase App Distribution
      #        uses: wzieba/Firebase-Distribution-Github-Action@v1
      #        with:
      #          appId: ${{secrets.FIREBASE_APP_ID_RELEASE}}
      #          serviceCredentialsFileContent: ${{ secrets.SERVICE_CREDENTIALS_FILE_RELEASE }}
      #          groups: ${{ github.event.inputs.testers }}
      #          file: ${{ steps.releaseApk.outputs.apkfile }}

      - name: Upload Release Build to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: family-rules-release.apk
          path: ${{ steps.releaseApk.outputs.apkfile }}

#  create-release:
#    runs-on: ubuntu-latest
#    needs: [ build ]
#    steps:
#      - uses: actions/download-artifact@v4
#        with:
#          name: family-rules-release.apk
#
#      - run: ls
#
#      - uses: actions/create-release@v1
#        id: create_release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: false
#          prerelease: false
#
#      - uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: "family-rules-release.apk"
#          asset_name: "family-rules-release.apk"
#          asset_content_type: application/vnd.android.package-archive